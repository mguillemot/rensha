
rensha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  0000098e  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  00800190  00800190  00000ab2  2**0
                  ALLOC
  3 .stab         00000cb4  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000216  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000219  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000114d  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a65  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000144a  00000000  00000000  00003889  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  00004cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004e2  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008cd  00000000  00000000  000053a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000228  00000000  00000000  00005c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000058  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	f0 c0       	rjmp	.+480    	; 0x1ec <__vector_5>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <__bad_interrupt>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	a8 c1       	rjmp	.+848    	; 0x36c <__vector_13>
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	63 c1       	rjmp	.+710    	; 0x2ec <__vector_18>
  26:	31 c0       	rjmp	.+98     	; 0x8a <__bad_interrupt>
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	2f c0       	rjmp	.+94     	; 0x8a <__bad_interrupt>
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	2d c0       	rjmp	.+90     	; 0x8a <__bad_interrupt>
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	2b c0       	rjmp	.+86     	; 0x8a <__bad_interrupt>
  34:	9e c0       	rjmp	.+316    	; 0x172 <debughex+0x14>
  36:	a0 c0       	rjmp	.+320    	; 0x178 <debughex+0x1a>
  38:	a2 c0       	rjmp	.+324    	; 0x17e <debughex+0x20>
  3a:	a4 c0       	rjmp	.+328    	; 0x184 <debughex+0x26>
  3c:	a6 c0       	rjmp	.+332    	; 0x18a <debughex+0x2c>
  3e:	a8 c0       	rjmp	.+336    	; 0x190 <debughex+0x32>
  40:	aa c0       	rjmp	.+340    	; 0x196 <debughex+0x38>
  42:	ac c0       	rjmp	.+344    	; 0x19c <debughex+0x3e>
  44:	ae c0       	rjmp	.+348    	; 0x1a2 <debughex+0x44>
  46:	b0 c0       	rjmp	.+352    	; 0x1a8 <debughex+0x4a>
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <debughex+0x50>
  4a:	b4 c0       	rjmp	.+360    	; 0x1b4 <debughex+0x56>
  4c:	b6 c0       	rjmp	.+364    	; 0x1ba <debughex+0x5c>
  4e:	b8 c0       	rjmp	.+368    	; 0x1c0 <debughex+0x62>
  50:	ba c0       	rjmp	.+372    	; 0x1c6 <debughex+0x68>
  52:	bc c0       	rjmp	.+376    	; 0x1cc <debughex+0x6e>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf ef       	ldi	r28, 0xFF	; 255
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e0       	ldi	r26, 0x00	; 0
  64:	b1 e0       	ldi	r27, 0x01	; 1
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 32       	cpi	r26, 0x2E	; 46
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	bc d0       	rcall	.+376    	; 0x200 <main>
  88:	89 c1       	rjmp	.+786    	; 0x39c <exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <Autofire_Init>:

static struct Profile profile;

void Autofire_Init()
{
	printf("a profile is %d bytes long\n", sizeof(struct Profile));
  8c:	00 d0       	rcall	.+0      	; 0x8e <Autofire_Init+0x2>
  8e:	00 d0       	rcall	.+0      	; 0x90 <Autofire_Init+0x4>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	ed b7       	in	r30, 0x3d	; 61
  96:	fe b7       	in	r31, 0x3e	; 62
  98:	92 83       	std	Z+2, r25	; 0x02
  9a:	81 83       	std	Z+1, r24	; 0x01
  9c:	84 e9       	ldi	r24, 0x94	; 148
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	94 83       	std	Z+4, r25	; 0x04
  a2:	83 83       	std	Z+3, r24	; 0x03
  a4:	7d d1       	rcall	.+762    	; 0x3a0 <printf>
	profile.name[0] = 'B';
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	80 93 90 01 	sts	0x0190, r24
	profile.name[1] = 'a';
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	80 93 91 01 	sts	0x0191, r24
	profile.name[2] = 't';
  b2:	94 e7       	ldi	r25, 0x74	; 116
  b4:	90 93 92 01 	sts	0x0192, r25
	profile.name[3] = 't';
  b8:	90 93 93 01 	sts	0x0193, r25
	profile.name[4] = 'l';
  bc:	9c e6       	ldi	r25, 0x6C	; 108
  be:	90 93 94 01 	sts	0x0194, r25
	profile.name[5] = 'e';
  c2:	95 e6       	ldi	r25, 0x65	; 101
  c4:	90 93 95 01 	sts	0x0195, r25
	profile.name[6] = ' ';
  c8:	20 e2       	ldi	r18, 0x20	; 32
  ca:	20 93 96 01 	sts	0x0196, r18
	profile.name[7] = 'G';
  ce:	27 e4       	ldi	r18, 0x47	; 71
  d0:	20 93 97 01 	sts	0x0197, r18
	profile.name[8] = 'a';
  d4:	80 93 98 01 	sts	0x0198, r24
	profile.name[9] = 'r';
  d8:	22 e7       	ldi	r18, 0x72	; 114
  da:	20 93 99 01 	sts	0x0199, r18
	profile.name[10] = 'e';
  de:	90 93 9a 01 	sts	0x019A, r25
	profile.name[11] = 'g';
  e2:	97 e6       	ldi	r25, 0x67	; 103
  e4:	90 93 9b 01 	sts	0x019B, r25
	profile.name[12] = 'g';
  e8:	90 93 9c 01 	sts	0x019C, r25
	profile.name[13] = 'a';
  ec:	80 93 9d 01 	sts	0x019D, r24
	profile.name[14] = 0;
  f0:	10 92 9e 01 	sts	0x019E, r1
	profile.name[15] = 0;
  f4:	10 92 9f 01 	sts	0x019F, r1
  f8:	e0 ea       	ldi	r30, 0xA0	; 160
  fa:	f1 e0       	ldi	r31, 0x01	; 1

#include "autofire.h"

static struct Profile profile;

void Autofire_Init()
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
	profile.name[13] = 'a';
	profile.name[14] = 0;
	profile.name[15] = 0;
	for (uint8_t i = 0; i < BUTTON_COUNT; ++i)
	{
		profile.button[i].type = AFTYPE_NORMAL;
 104:	10 82       	st	Z, r1
 106:	36 96       	adiw	r30, 0x06	; 6
	profile.name[11] = 'g';
	profile.name[12] = 'g';
	profile.name[13] = 'a';
	profile.name[14] = 0;
	profile.name[15] = 0;
	for (uint8_t i = 0; i < BUTTON_COUNT; ++i)
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	e4 32       	cpi	r30, 0x24	; 36
 10c:	f8 07       	cpc	r31, r24
 10e:	d1 f7       	brne	.-12     	; 0x104 <Autofire_Init+0x78>
	{
		profile.button[i].type = AFTYPE_NORMAL;
	}
	printf("Profile %s loaded.\n", profile.name);
 110:	00 d0       	rcall	.+0      	; 0x112 <Autofire_Init+0x86>
 112:	00 d0       	rcall	.+0      	; 0x114 <Autofire_Init+0x88>
 114:	8c e1       	ldi	r24, 0x1C	; 28
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	ed b7       	in	r30, 0x3d	; 61
 11a:	fe b7       	in	r31, 0x3e	; 62
 11c:	92 83       	std	Z+2, r25	; 0x02
 11e:	81 83       	std	Z+1, r24	; 0x01
 120:	80 e9       	ldi	r24, 0x90	; 144
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	94 83       	std	Z+4, r25	; 0x04
 126:	83 83       	std	Z+3, r24	; 0x03
 128:	3b d1       	rcall	.+630    	; 0x3a0 <printf>
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
}
 132:	08 95       	ret

00000134 <Autofire_LoadProfile>:

void Autofire_LoadProfile(struct profile *p)
{
		
}
 134:	08 95       	ret

00000136 <Autofire_Update>:

void Autofire_Update()
{
	
	
 136:	08 95       	ret

00000138 <debug>:
#include <avr/io.h>

extern void USART_Transmit(uint8_t data);

void debug(const char *text)
{
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	e8 2e       	mov	r14, r24
 142:	e7 01       	movw	r28, r14
 144:	7e 01       	movw	r14, r28
 146:	f9 2e       	mov	r15, r25
 148:	e7 01       	movw	r28, r14
	const char *ptr = text;
	while (*ptr != '\0')
 14a:	01 c0       	rjmp	.+2      	; 0x14e <debug+0x16>
	{
		USART_Transmit(*ptr++);
 14c:	b7 d0       	rcall	.+366    	; 0x2bc <USART_Transmit>
extern void USART_Transmit(uint8_t data);

void debug(const char *text)
{
	const char *ptr = text;
	while (*ptr != '\0')
 14e:	89 91       	ld	r24, Y+
 150:	88 23       	and	r24, r24
 152:	e1 f7       	brne	.-8      	; 0x14c <debug+0x14>
	{
		USART_Transmit(*ptr++);
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	08 95       	ret

0000015e <debughex>:

void debughex(uint8_t c)
{
 15e:	1f 93       	push	r17
 160:	18 2f       	mov	r17, r24
	switch (c)
 162:	e1 2f       	mov	r30, r17
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 31       	cpi	r30, 0x10	; 16
 168:	f1 05       	cpc	r31, r1
 16a:	a8 f5       	brcc	.+106    	; 0x1d6 <debughex+0x78>
 16c:	e6 5e       	subi	r30, 0xE6	; 230
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	09 94       	ijmp
	{
		case 0: debug("0"); break;
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	2c c0       	rjmp	.+88     	; 0x1d0 <debughex+0x72>
		case 1: debug("1"); break;
 178:	82 e3       	ldi	r24, 0x32	; 50
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	29 c0       	rjmp	.+82     	; 0x1d0 <debughex+0x72>
		case 2: debug("2"); break;
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	26 c0       	rjmp	.+76     	; 0x1d0 <debughex+0x72>
		case 3: debug("3"); break;
 184:	86 e3       	ldi	r24, 0x36	; 54
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	23 c0       	rjmp	.+70     	; 0x1d0 <debughex+0x72>
		case 4: debug("4"); break;
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	20 c0       	rjmp	.+64     	; 0x1d0 <debughex+0x72>
		case 5: debug("5"); break;
 190:	8a e3       	ldi	r24, 0x3A	; 58
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	1d c0       	rjmp	.+58     	; 0x1d0 <debughex+0x72>
		case 6: debug("6"); break;
 196:	8c e3       	ldi	r24, 0x3C	; 60
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	1a c0       	rjmp	.+52     	; 0x1d0 <debughex+0x72>
		case 7: debug("7"); break;
 19c:	8e e3       	ldi	r24, 0x3E	; 62
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <debughex+0x72>
		case 8: debug("8"); break;
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	14 c0       	rjmp	.+40     	; 0x1d0 <debughex+0x72>
		case 9: debug("9"); break;
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	11 c0       	rjmp	.+34     	; 0x1d0 <debughex+0x72>
		case 10: debug("a"); break;
 1ae:	84 e4       	ldi	r24, 0x44	; 68
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <debughex+0x72>
		case 11: debug("b"); break;
 1b4:	86 e4       	ldi	r24, 0x46	; 70
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <debughex+0x72>
		case 12: debug("c"); break;
 1ba:	88 e4       	ldi	r24, 0x48	; 72
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <debughex+0x72>
		case 13: debug("d"); break;
 1c0:	8a e4       	ldi	r24, 0x4A	; 74
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <debughex+0x72>
		case 14: debug("e"); break;
 1c6:	8c e4       	ldi	r24, 0x4C	; 76
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <debughex+0x72>
		case 15: debug("f"); break;
 1cc:	8e e4       	ldi	r24, 0x4E	; 78
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	b3 df       	rcall	.-154    	; 0x138 <debug>
		default:
			debughex(c >> 8);
			debughex(c & 0x0f);	
			break;
	}
}
 1d2:	1f 91       	pop	r17
 1d4:	08 95       	ret
		case 12: debug("c"); break;
		case 13: debug("d"); break;
		case 14: debug("e"); break;
		case 15: debug("f"); break;
		default:
			debughex(c >> 8);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	c2 df       	rcall	.-124    	; 0x15e <debughex>
			debughex(c & 0x0f);	
 1da:	1f 70       	andi	r17, 0x0F	; 15
			break;
 1dc:	c2 cf       	rjmp	.-124    	; 0x162 <debughex+0x4>

000001de <debugln>:
	}
}

void debugln(const char *text)
{
	debug(text);
 1de:	ac df       	rcall	.-168    	; 0x138 <debug>
	USART_Transmit('\r');
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	6c d0       	rcall	.+216    	; 0x2bc <USART_Transmit>
	USART_Transmit('\n');
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	6a d0       	rcall	.+212    	; 0x2bc <USART_Transmit>
}
 1e8:	08 95       	ret

000001ea <updateOutput>:
			printf("%u | button 1 pushed\n", timer);
		}
		buttonStatus = in;
	}
	PORTB = !buttonStatus; */
}
 1ea:	08 95       	ret

000001ec <__vector_5>:

/* interrupt vector for port D inputs */
ISR(PCINT2_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
	//uint8_t burst = (in >> 3) & 1; // pin 3
	//uint8_t oddeven = (in >> 4) & 1; // pin 4
	//uint8_t vsync = (in >> 5) & 1; // pin 5
	//uint8_t compo = (in >> 6) & 1; // pin 6
	//printf("%u,%d\n", timer, vsync);
}
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:




int main(void)
{
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
	USART_Init();
 206:	43 d0       	rcall	.+134    	; 0x28e <USART_Init>
	printf("USART initialized.\n");
 208:	80 e5       	ldi	r24, 0x50	; 80
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	db d0       	rcall	.+438    	; 0x3c4 <puts>
	Video_Init();
 20e:	c5 d0       	rcall	.+394    	; 0x39a <Video_Init>
	printf("Video initialized.\n");
 210:	83 e6       	ldi	r24, 0x63	; 99
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	d7 d0       	rcall	.+430    	; 0x3c4 <puts>


	/* button inputs are on port D, pins 7-4 */
	DDRD = 0x00; // 0=input 1=output
 216:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11110000; // pull-up resistors on pins 7-4
 218:	80 ef       	ldi	r24, 0xF0	; 240
 21a:	8b b9       	out	0x0b, r24	; 11
	//PCMSK2 |= _BV(PCINT21); // enable port D pin 5 contribution to PCINT2 interrupt
	//PCMSK2 |= _BV(PCINT22); // enable port D pin 6 contribution to PCINT2 interrupt
	//PCICR = _BV(PCIE2); // enable PCINT2 interrupt

	/* button outputs are on port B */ 
	DDRB = 0xff; // 0=input 1=output
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	84 b9       	out	0x04, r24	; 4
	
	DDRC = 0xff;
 220:	87 b9       	out	0x07, r24	; 7

	/* timer 1 */
	TCCR1B |= _BV(CS11) | _BV(CS10); // enabled with div64 prescaleer
 222:	80 91 81 00 	lds	r24, 0x0081
 226:	83 60       	ori	r24, 0x03	; 3
 228:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= _BV(TOIE1); // Overflow Interrupt Enable
 22c:	80 91 6f 00 	lds	r24, 0x006F
 230:	81 60       	ori	r24, 0x01	; 1
 232:	80 93 6f 00 	sts	0x006F, r24

	//sei();
	uint8_t i = 0;
 236:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		// afficheur 16seg
		PORTC = (i++ & 1) << 2;
		_delay_ms(500);
		printf("C=%d\n", (i & 1) << 2);
 238:	c6 e7       	ldi	r28, 0x76	; 118
 23a:	d1 e0       	ldi	r29, 0x01	; 1
	//sei();
	uint8_t i = 0;
	while(1)
	{
		// afficheur 16seg
		PORTC = (i++ & 1) << 2;
 23c:	81 2f       	mov	r24, r17
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	88 0f       	add	r24, r24
 242:	88 0f       	add	r24, r24
 244:	88 b9       	out	0x08, r24	; 8
 246:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e7       	ldi	r24, 0x7F	; 127
 24a:	94 e8       	ldi	r25, 0x84	; 132
 24c:	ae e1       	ldi	r26, 0x1E	; 30
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	a0 40       	sbci	r26, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x4e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x58>
 258:	00 00       	nop
		_delay_ms(500);
		printf("C=%d\n", (i & 1) << 2);
 25a:	00 d0       	rcall	.+0      	; 0x25c <main+0x5c>
 25c:	00 d0       	rcall	.+0      	; 0x25e <main+0x5e>
 25e:	ad b7       	in	r26, 0x3d	; 61
 260:	be b7       	in	r27, 0x3e	; 62
 262:	12 96       	adiw	r26, 0x02	; 2
 264:	dc 93       	st	X, r29
 266:	ce 93       	st	-X, r28
 268:	11 97       	sbiw	r26, 0x01	; 1
 26a:	81 2f       	mov	r24, r17
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	90 70       	andi	r25, 0x00	; 0
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	14 96       	adiw	r26, 0x04	; 4
 27c:	9c 93       	st	X, r25
 27e:	8e 93       	st	-X, r24
 280:	13 97       	sbiw	r26, 0x03	; 3
 282:	8e d0       	rcall	.+284    	; 0x3a0 <printf>
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	d7 cf       	rjmp	.-82     	; 0x23c <main+0x3c>

0000028e <USART_Init>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

void USART_Init()
{
	/* Init USART clock */
	UBRR0H = UBRRH_VALUE;
 28e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#else
	UCSR0A &= ~(1 << U2X0);
 298:	e0 ec       	ldi	r30, 0xC0	; 192
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	80 83       	st	Z, r24
	#endif

	/* Enable receiver and transmitter and receive interrupt */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0)|_BV(RXCIE0);
 2a2:	88 e9       	ldi	r24, 0x98	; 152
 2a4:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	80 93 c2 00 	sts	0x00C2, r24

	/* Register USART as standard output */
	stdout = &mystdout;
 2ae:	81 e8       	ldi	r24, 0x81	; 129
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	90 93 2b 02 	sts	0x022B, r25
 2b6:	80 93 2a 02 	sts	0x022A, r24
}
 2ba:	08 95       	ret

000002bc <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
 2bc:	90 91 c0 00 	lds	r25, 0x00C0
 2c0:	95 ff       	sbrs	r25, 5
 2c2:	fc cf       	rjmp	.-8      	; 0x2bc <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 2c4:	80 93 c6 00 	sts	0x00C6, r24
}
 2c8:	08 95       	ret

000002ca <uart_putchar>:
	/* Get and return received data from buffer */
	return UDR0;
}

static int uart_putchar(char c, FILE *stream)
{
 2ca:	1f 93       	push	r17
 2cc:	18 2f       	mov	r17, r24
	if (c == '\n')
 2ce:	8a 30       	cpi	r24, 0x0A	; 10
 2d0:	11 f4       	brne	.+4      	; 0x2d6 <uart_putchar+0xc>
		uart_putchar('\r', stream);
 2d2:	8d e0       	ldi	r24, 0x0D	; 13
 2d4:	fa df       	rcall	.-12     	; 0x2ca <uart_putchar>
	USART_Transmit(c);
 2d6:	81 2f       	mov	r24, r17
 2d8:	f1 df       	rcall	.-30     	; 0x2bc <USART_Transmit>
}
 2da:	1f 91       	pop	r17
 2dc:	08 95       	ret

000002de <USART_Receive>:
}

uint8_t USART_Receive()
{
	/* Wait for data to be received */
	while (!(UCSR0A & _BV(RXC0)));
 2de:	80 91 c0 00 	lds	r24, 0x00C0
 2e2:	87 ff       	sbrs	r24, 7
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
 2e6:	80 91 c6 00 	lds	r24, 0x00C6
}
 2ea:	08 95       	ret

000002ec <__vector_18>:
	USART_Transmit(c);
}

/* interrupt vector for USART data reception */
ISR(USART_RX_vect)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	uint8_t c = USART_Receive();
 30e:	e7 df       	rcall	.-50     	; 0x2de <USART_Receive>
	if (c == '\r')
 310:	8d 30       	cpi	r24, 0x0D	; 13
 312:	21 f4       	brne	.+8      	; 0x31c <__vector_18+0x30>
	{
		printf("\nOK.\n");
 314:	8c e7       	ldi	r24, 0x7C	; 124
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	55 d0       	rcall	.+170    	; 0x3c4 <puts>
 31a:	01 c0       	rjmp	.+2      	; 0x31e <__vector_18+0x32>
	}
	else
	{
		USART_Transmit(c);
 31c:	cf df       	rcall	.-98     	; 0x2bc <USART_Transmit>
	}
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <getCurrentTime>:

uint16_t timer1overflows = 0;

uint32_t getCurrentTime()
{
	uint32_t res = timer1overflows;
 340:	20 91 24 02 	lds	r18, 0x0224
 344:	30 91 25 02 	lds	r19, 0x0225
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
	res <<= 16;
 34c:	a9 01       	movw	r20, r18
 34e:	33 27       	eor	r19, r19
 350:	22 27       	eor	r18, r18
	res |= TCNT1;
 352:	80 91 84 00 	lds	r24, 0x0084
 356:	90 91 85 00 	lds	r25, 0x0085
 35a:	a0 e0       	ldi	r26, 0x00	; 0
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	28 2b       	or	r18, r24
 360:	39 2b       	or	r19, r25
 362:	4a 2b       	or	r20, r26
 364:	5b 2b       	or	r21, r27
	return res; 
}
 366:	b9 01       	movw	r22, r18
 368:	ca 01       	movw	r24, r20
 36a:	08 95       	ret

0000036c <__vector_13>:

/* interrupt vector for timer 1 overflow */
ISR(TIMER1_OVF_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
	timer1overflows++;
 37a:	80 91 24 02 	lds	r24, 0x0224
 37e:	90 91 25 02 	lds	r25, 0x0225
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	90 93 25 02 	sts	0x0225, r25
 388:	80 93 24 02 	sts	0x0224, r24
}
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <Video_Init>:
	#ifdef ENABLE_BBP_DETECTION
	/* Bust / Back Porch detection is on port D, pin 3 (INT1) */
	EICRA |= _BV(ISC11); // trigger INT1 on falling edge of signal
	EIMSK |= _BV(INT1); // enable INT1
	#endif
 39a:	08 95       	ret

0000039c <exit>:
 39c:	f8 94       	cli
 39e:	f5 c2       	rjmp	.+1514   	; 0x98a <_exit>

000003a0 <printf>:
 3a0:	a0 e0       	ldi	r26, 0x00	; 0
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e5 ed       	ldi	r30, 0xD5	; 213
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	c9 c2       	rjmp	.+1426   	; 0x93c <__prologue_saves__+0x20>
 3aa:	fe 01       	movw	r30, r28
 3ac:	35 96       	adiw	r30, 0x05	; 5
 3ae:	61 91       	ld	r22, Z+
 3b0:	71 91       	ld	r23, Z+
 3b2:	80 91 2a 02 	lds	r24, 0x022A
 3b6:	90 91 2b 02 	lds	r25, 0x022B
 3ba:	af 01       	movw	r20, r30
 3bc:	37 d0       	rcall	.+110    	; 0x42c <vfprintf>
 3be:	20 96       	adiw	r28, 0x00	; 0
 3c0:	e2 e0       	ldi	r30, 0x02	; 2
 3c2:	d8 c2       	rjmp	.+1456   	; 0x974 <__epilogue_restores__+0x20>

000003c4 <puts>:
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	8c 01       	movw	r16, r24
 3d2:	e0 91 2a 02 	lds	r30, 0x022A
 3d6:	f0 91 2b 02 	lds	r31, 0x022B
 3da:	83 81       	ldd	r24, Z+3	; 0x03
 3dc:	81 ff       	sbrs	r24, 1
 3de:	1f c0       	rjmp	.+62     	; 0x41e <puts+0x5a>
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	0a c0       	rjmp	.+20     	; 0x3fa <puts+0x36>
 3e6:	db 01       	movw	r26, r22
 3e8:	18 96       	adiw	r26, 0x08	; 8
 3ea:	ed 91       	ld	r30, X+
 3ec:	fc 91       	ld	r31, X
 3ee:	19 97       	sbiw	r26, 0x09	; 9
 3f0:	09 95       	icall
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	11 f0       	breq	.+4      	; 0x3fa <puts+0x36>
 3f6:	cf ef       	ldi	r28, 0xFF	; 255
 3f8:	df ef       	ldi	r29, 0xFF	; 255
 3fa:	f8 01       	movw	r30, r16
 3fc:	81 91       	ld	r24, Z+
 3fe:	8f 01       	movw	r16, r30
 400:	60 91 2a 02 	lds	r22, 0x022A
 404:	70 91 2b 02 	lds	r23, 0x022B
 408:	88 23       	and	r24, r24
 40a:	69 f7       	brne	.-38     	; 0x3e6 <puts+0x22>
 40c:	db 01       	movw	r26, r22
 40e:	18 96       	adiw	r26, 0x08	; 8
 410:	ed 91       	ld	r30, X+
 412:	fc 91       	ld	r31, X
 414:	19 97       	sbiw	r26, 0x09	; 9
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	09 95       	icall
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	11 f0       	breq	.+4      	; 0x422 <puts+0x5e>
 41e:	cf ef       	ldi	r28, 0xFF	; 255
 420:	df ef       	ldi	r29, 0xFF	; 255
 422:	ce 01       	movw	r24, r28
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	e6 e0       	ldi	r30, 0x06	; 6
 42a:	a0 c2       	rjmp	.+1344   	; 0x96c <__epilogue_restores__+0x18>

0000042c <vfprintf>:
 42c:	ac e0       	ldi	r26, 0x0C	; 12
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	eb e1       	ldi	r30, 0x1B	; 27
 432:	f2 e0       	ldi	r31, 0x02	; 2
 434:	73 c2       	rjmp	.+1254   	; 0x91c <__prologue_saves__>
 436:	6c 01       	movw	r12, r24
 438:	1b 01       	movw	r2, r22
 43a:	8a 01       	movw	r16, r20
 43c:	fc 01       	movw	r30, r24
 43e:	17 82       	std	Z+7, r1	; 0x07
 440:	16 82       	std	Z+6, r1	; 0x06
 442:	83 81       	ldd	r24, Z+3	; 0x03
 444:	81 ff       	sbrs	r24, 1
 446:	c4 c1       	rjmp	.+904    	; 0x7d0 <__stack+0x2d1>
 448:	2e 01       	movw	r4, r28
 44a:	08 94       	sec
 44c:	41 1c       	adc	r4, r1
 44e:	51 1c       	adc	r5, r1
 450:	f6 01       	movw	r30, r12
 452:	93 81       	ldd	r25, Z+3	; 0x03
 454:	f1 01       	movw	r30, r2
 456:	93 fd       	sbrc	r25, 3
 458:	85 91       	lpm	r24, Z+
 45a:	93 ff       	sbrs	r25, 3
 45c:	81 91       	ld	r24, Z+
 45e:	1f 01       	movw	r2, r30
 460:	88 23       	and	r24, r24
 462:	09 f4       	brne	.+2      	; 0x466 <vfprintf+0x3a>
 464:	b1 c1       	rjmp	.+866    	; 0x7c8 <__stack+0x2c9>
 466:	85 32       	cpi	r24, 0x25	; 37
 468:	39 f4       	brne	.+14     	; 0x478 <vfprintf+0x4c>
 46a:	93 fd       	sbrc	r25, 3
 46c:	85 91       	lpm	r24, Z+
 46e:	93 ff       	sbrs	r25, 3
 470:	81 91       	ld	r24, Z+
 472:	1f 01       	movw	r2, r30
 474:	85 32       	cpi	r24, 0x25	; 37
 476:	21 f4       	brne	.+8      	; 0x480 <vfprintf+0x54>
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	b6 01       	movw	r22, r12
 47c:	c5 d1       	rcall	.+906    	; 0x808 <fputc>
 47e:	e8 cf       	rjmp	.-48     	; 0x450 <vfprintf+0x24>
 480:	ee 24       	eor	r14, r14
 482:	ff 24       	eor	r15, r15
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	20 32       	cpi	r18, 0x20	; 32
 488:	b0 f4       	brcc	.+44     	; 0x4b6 <vfprintf+0x8a>
 48a:	8b 32       	cpi	r24, 0x2B	; 43
 48c:	69 f0       	breq	.+26     	; 0x4a8 <vfprintf+0x7c>
 48e:	8c 32       	cpi	r24, 0x2C	; 44
 490:	28 f4       	brcc	.+10     	; 0x49c <vfprintf+0x70>
 492:	80 32       	cpi	r24, 0x20	; 32
 494:	51 f0       	breq	.+20     	; 0x4aa <vfprintf+0x7e>
 496:	83 32       	cpi	r24, 0x23	; 35
 498:	71 f4       	brne	.+28     	; 0x4b6 <vfprintf+0x8a>
 49a:	0b c0       	rjmp	.+22     	; 0x4b2 <vfprintf+0x86>
 49c:	8d 32       	cpi	r24, 0x2D	; 45
 49e:	39 f0       	breq	.+14     	; 0x4ae <vfprintf+0x82>
 4a0:	80 33       	cpi	r24, 0x30	; 48
 4a2:	49 f4       	brne	.+18     	; 0x4b6 <vfprintf+0x8a>
 4a4:	21 60       	ori	r18, 0x01	; 1
 4a6:	2c c0       	rjmp	.+88     	; 0x500 <__stack+0x1>
 4a8:	22 60       	ori	r18, 0x02	; 2
 4aa:	24 60       	ori	r18, 0x04	; 4
 4ac:	29 c0       	rjmp	.+82     	; 0x500 <__stack+0x1>
 4ae:	28 60       	ori	r18, 0x08	; 8
 4b0:	27 c0       	rjmp	.+78     	; 0x500 <__stack+0x1>
 4b2:	20 61       	ori	r18, 0x10	; 16
 4b4:	25 c0       	rjmp	.+74     	; 0x500 <__stack+0x1>
 4b6:	27 fd       	sbrc	r18, 7
 4b8:	2c c0       	rjmp	.+88     	; 0x512 <__stack+0x13>
 4ba:	38 2f       	mov	r19, r24
 4bc:	30 53       	subi	r19, 0x30	; 48
 4be:	3a 30       	cpi	r19, 0x0A	; 10
 4c0:	98 f4       	brcc	.+38     	; 0x4e8 <vfprintf+0xbc>
 4c2:	26 ff       	sbrs	r18, 6
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <vfprintf+0xaa>
 4c6:	8e 2d       	mov	r24, r14
 4c8:	88 0f       	add	r24, r24
 4ca:	e8 2e       	mov	r14, r24
 4cc:	ee 0c       	add	r14, r14
 4ce:	ee 0c       	add	r14, r14
 4d0:	e8 0e       	add	r14, r24
 4d2:	e3 0e       	add	r14, r19
 4d4:	15 c0       	rjmp	.+42     	; 0x500 <__stack+0x1>
 4d6:	8f 2d       	mov	r24, r15
 4d8:	88 0f       	add	r24, r24
 4da:	f8 2e       	mov	r15, r24
 4dc:	ff 0c       	add	r15, r15
 4de:	ff 0c       	add	r15, r15
 4e0:	f8 0e       	add	r15, r24
 4e2:	f3 0e       	add	r15, r19
 4e4:	20 62       	ori	r18, 0x20	; 32
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <__stack+0x1>
 4e8:	8e 32       	cpi	r24, 0x2E	; 46
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <vfprintf+0xc8>
 4ec:	26 fd       	sbrc	r18, 6
 4ee:	6c c1       	rjmp	.+728    	; 0x7c8 <__stack+0x2c9>
 4f0:	20 64       	ori	r18, 0x40	; 64
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__stack+0x1>
 4f4:	8c 36       	cpi	r24, 0x6C	; 108
 4f6:	11 f4       	brne	.+4      	; 0x4fc <vfprintf+0xd0>
 4f8:	20 68       	ori	r18, 0x80	; 128
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
 4fc:	88 36       	cpi	r24, 0x68	; 104
 4fe:	49 f4       	brne	.+18     	; 0x512 <__stack+0x13>
 500:	f1 01       	movw	r30, r2
 502:	93 fd       	sbrc	r25, 3
 504:	85 91       	lpm	r24, Z+
 506:	93 ff       	sbrs	r25, 3
 508:	81 91       	ld	r24, Z+
 50a:	1f 01       	movw	r2, r30
 50c:	88 23       	and	r24, r24
 50e:	09 f0       	breq	.+2      	; 0x512 <__stack+0x13>
 510:	ba cf       	rjmp	.-140    	; 0x486 <vfprintf+0x5a>
 512:	98 2f       	mov	r25, r24
 514:	95 54       	subi	r25, 0x45	; 69
 516:	93 30       	cpi	r25, 0x03	; 3
 518:	18 f0       	brcs	.+6      	; 0x520 <__stack+0x21>
 51a:	90 52       	subi	r25, 0x20	; 32
 51c:	93 30       	cpi	r25, 0x03	; 3
 51e:	28 f4       	brcc	.+10     	; 0x52a <__stack+0x2b>
 520:	0c 5f       	subi	r16, 0xFC	; 252
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	ff e3       	ldi	r31, 0x3F	; 63
 526:	f9 83       	std	Y+1, r31	; 0x01
 528:	0d c0       	rjmp	.+26     	; 0x544 <__stack+0x45>
 52a:	83 36       	cpi	r24, 0x63	; 99
 52c:	31 f0       	breq	.+12     	; 0x53a <__stack+0x3b>
 52e:	83 37       	cpi	r24, 0x73	; 115
 530:	71 f0       	breq	.+28     	; 0x54e <__stack+0x4f>
 532:	83 35       	cpi	r24, 0x53	; 83
 534:	09 f0       	breq	.+2      	; 0x538 <__stack+0x39>
 536:	5c c0       	rjmp	.+184    	; 0x5f0 <__stack+0xf1>
 538:	21 c0       	rjmp	.+66     	; 0x57c <__stack+0x7d>
 53a:	f8 01       	movw	r30, r16
 53c:	80 81       	ld	r24, Z
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	0e 5f       	subi	r16, 0xFE	; 254
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	42 01       	movw	r8, r4
 546:	71 e0       	ldi	r23, 0x01	; 1
 548:	a7 2e       	mov	r10, r23
 54a:	b1 2c       	mov	r11, r1
 54c:	15 c0       	rjmp	.+42     	; 0x578 <__stack+0x79>
 54e:	62 e0       	ldi	r22, 0x02	; 2
 550:	66 2e       	mov	r6, r22
 552:	71 2c       	mov	r7, r1
 554:	60 0e       	add	r6, r16
 556:	71 1e       	adc	r7, r17
 558:	f8 01       	movw	r30, r16
 55a:	80 80       	ld	r8, Z
 55c:	91 80       	ldd	r9, Z+1	; 0x01
 55e:	26 ff       	sbrs	r18, 6
 560:	03 c0       	rjmp	.+6      	; 0x568 <__stack+0x69>
 562:	6e 2d       	mov	r22, r14
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x6d>
 568:	6f ef       	ldi	r22, 0xFF	; 255
 56a:	7f ef       	ldi	r23, 0xFF	; 255
 56c:	c4 01       	movw	r24, r8
 56e:	2c 87       	std	Y+12, r18	; 0x0c
 570:	40 d1       	rcall	.+640    	; 0x7f2 <strnlen>
 572:	5c 01       	movw	r10, r24
 574:	83 01       	movw	r16, r6
 576:	2c 85       	ldd	r18, Y+12	; 0x0c
 578:	2f 77       	andi	r18, 0x7F	; 127
 57a:	16 c0       	rjmp	.+44     	; 0x5a8 <__stack+0xa9>
 57c:	52 e0       	ldi	r21, 0x02	; 2
 57e:	65 2e       	mov	r6, r21
 580:	71 2c       	mov	r7, r1
 582:	60 0e       	add	r6, r16
 584:	71 1e       	adc	r7, r17
 586:	f8 01       	movw	r30, r16
 588:	80 80       	ld	r8, Z
 58a:	91 80       	ldd	r9, Z+1	; 0x01
 58c:	26 ff       	sbrs	r18, 6
 58e:	03 c0       	rjmp	.+6      	; 0x596 <__stack+0x97>
 590:	6e 2d       	mov	r22, r14
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <__stack+0x9b>
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	c4 01       	movw	r24, r8
 59c:	2c 87       	std	Y+12, r18	; 0x0c
 59e:	1e d1       	rcall	.+572    	; 0x7dc <strnlen_P>
 5a0:	5c 01       	movw	r10, r24
 5a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 5a4:	20 68       	ori	r18, 0x80	; 128
 5a6:	83 01       	movw	r16, r6
 5a8:	23 fd       	sbrc	r18, 3
 5aa:	1e c0       	rjmp	.+60     	; 0x5e8 <__stack+0xe9>
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <__stack+0xbd>
 5ae:	80 e2       	ldi	r24, 0x20	; 32
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	b6 01       	movw	r22, r12
 5b4:	2c 87       	std	Y+12, r18	; 0x0c
 5b6:	28 d1       	rcall	.+592    	; 0x808 <fputc>
 5b8:	fa 94       	dec	r15
 5ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 5bc:	8f 2d       	mov	r24, r15
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	a8 16       	cp	r10, r24
 5c2:	b9 06       	cpc	r11, r25
 5c4:	a0 f3       	brcs	.-24     	; 0x5ae <__stack+0xaf>
 5c6:	10 c0       	rjmp	.+32     	; 0x5e8 <__stack+0xe9>
 5c8:	f4 01       	movw	r30, r8
 5ca:	27 fd       	sbrc	r18, 7
 5cc:	85 91       	lpm	r24, Z+
 5ce:	27 ff       	sbrs	r18, 7
 5d0:	81 91       	ld	r24, Z+
 5d2:	4f 01       	movw	r8, r30
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	b6 01       	movw	r22, r12
 5d8:	2c 87       	std	Y+12, r18	; 0x0c
 5da:	16 d1       	rcall	.+556    	; 0x808 <fputc>
 5dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 5de:	f1 10       	cpse	r15, r1
 5e0:	fa 94       	dec	r15
 5e2:	08 94       	sec
 5e4:	a1 08       	sbc	r10, r1
 5e6:	b1 08       	sbc	r11, r1
 5e8:	a1 14       	cp	r10, r1
 5ea:	b1 04       	cpc	r11, r1
 5ec:	69 f7       	brne	.-38     	; 0x5c8 <__stack+0xc9>
 5ee:	e9 c0       	rjmp	.+466    	; 0x7c2 <__stack+0x2c3>
 5f0:	84 36       	cpi	r24, 0x64	; 100
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__stack+0xf9>
 5f4:	89 36       	cpi	r24, 0x69	; 105
 5f6:	41 f5       	brne	.+80     	; 0x648 <__stack+0x149>
 5f8:	27 ff       	sbrs	r18, 7
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <__stack+0x10d>
 5fc:	f8 01       	movw	r30, r16
 5fe:	60 81       	ld	r22, Z
 600:	71 81       	ldd	r23, Z+1	; 0x01
 602:	82 81       	ldd	r24, Z+2	; 0x02
 604:	93 81       	ldd	r25, Z+3	; 0x03
 606:	0c 5f       	subi	r16, 0xFC	; 252
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	09 c0       	rjmp	.+18     	; 0x61e <__stack+0x11f>
 60c:	f8 01       	movw	r30, r16
 60e:	60 81       	ld	r22, Z
 610:	71 81       	ldd	r23, Z+1	; 0x01
 612:	88 27       	eor	r24, r24
 614:	77 fd       	sbrc	r23, 7
 616:	80 95       	com	r24
 618:	98 2f       	mov	r25, r24
 61a:	0e 5f       	subi	r16, 0xFE	; 254
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
 61e:	4f e6       	ldi	r20, 0x6F	; 111
 620:	b4 2e       	mov	r11, r20
 622:	b2 22       	and	r11, r18
 624:	97 ff       	sbrs	r25, 7
 626:	09 c0       	rjmp	.+18     	; 0x63a <__stack+0x13b>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	f0 e8       	ldi	r31, 0x80	; 128
 638:	bf 2a       	or	r11, r31
 63a:	a2 01       	movw	r20, r4
 63c:	2a e0       	ldi	r18, 0x0A	; 10
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	0f d1       	rcall	.+542    	; 0x860 <__ultoa_invert>
 642:	78 2e       	mov	r7, r24
 644:	74 18       	sub	r7, r4
 646:	44 c0       	rjmp	.+136    	; 0x6d0 <__stack+0x1d1>
 648:	85 37       	cpi	r24, 0x75	; 117
 64a:	31 f4       	brne	.+12     	; 0x658 <__stack+0x159>
 64c:	3f ee       	ldi	r19, 0xEF	; 239
 64e:	b3 2e       	mov	r11, r19
 650:	b2 22       	and	r11, r18
 652:	2a e0       	ldi	r18, 0x0A	; 10
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	25 c0       	rjmp	.+74     	; 0x6a2 <__stack+0x1a3>
 658:	99 ef       	ldi	r25, 0xF9	; 249
 65a:	b9 2e       	mov	r11, r25
 65c:	b2 22       	and	r11, r18
 65e:	8f 36       	cpi	r24, 0x6F	; 111
 660:	c1 f0       	breq	.+48     	; 0x692 <__stack+0x193>
 662:	80 37       	cpi	r24, 0x70	; 112
 664:	20 f4       	brcc	.+8      	; 0x66e <__stack+0x16f>
 666:	88 35       	cpi	r24, 0x58	; 88
 668:	09 f0       	breq	.+2      	; 0x66c <__stack+0x16d>
 66a:	ae c0       	rjmp	.+348    	; 0x7c8 <__stack+0x2c9>
 66c:	0d c0       	rjmp	.+26     	; 0x688 <__stack+0x189>
 66e:	80 37       	cpi	r24, 0x70	; 112
 670:	21 f0       	breq	.+8      	; 0x67a <__stack+0x17b>
 672:	88 37       	cpi	r24, 0x78	; 120
 674:	09 f0       	breq	.+2      	; 0x678 <__stack+0x179>
 676:	a8 c0       	rjmp	.+336    	; 0x7c8 <__stack+0x2c9>
 678:	02 c0       	rjmp	.+4      	; 0x67e <__stack+0x17f>
 67a:	20 e1       	ldi	r18, 0x10	; 16
 67c:	b2 2a       	or	r11, r18
 67e:	b4 fe       	sbrs	r11, 4
 680:	0b c0       	rjmp	.+22     	; 0x698 <__stack+0x199>
 682:	84 e0       	ldi	r24, 0x04	; 4
 684:	b8 2a       	or	r11, r24
 686:	08 c0       	rjmp	.+16     	; 0x698 <__stack+0x199>
 688:	b4 fe       	sbrs	r11, 4
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__stack+0x19f>
 68c:	e6 e0       	ldi	r30, 0x06	; 6
 68e:	be 2a       	or	r11, r30
 690:	06 c0       	rjmp	.+12     	; 0x69e <__stack+0x19f>
 692:	28 e0       	ldi	r18, 0x08	; 8
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <__stack+0x1a3>
 698:	20 e1       	ldi	r18, 0x10	; 16
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__stack+0x1a3>
 69e:	20 e1       	ldi	r18, 0x10	; 16
 6a0:	32 e0       	ldi	r19, 0x02	; 2
 6a2:	b7 fe       	sbrs	r11, 7
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <__stack+0x1b7>
 6a6:	f8 01       	movw	r30, r16
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	82 81       	ldd	r24, Z+2	; 0x02
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	0c 5f       	subi	r16, 0xFC	; 252
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <__stack+0x1c5>
 6b6:	f8 01       	movw	r30, r16
 6b8:	60 81       	ld	r22, Z
 6ba:	71 81       	ldd	r23, Z+1	; 0x01
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 5f       	subi	r16, 0xFE	; 254
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	a2 01       	movw	r20, r4
 6c6:	cc d0       	rcall	.+408    	; 0x860 <__ultoa_invert>
 6c8:	78 2e       	mov	r7, r24
 6ca:	74 18       	sub	r7, r4
 6cc:	ff e7       	ldi	r31, 0x7F	; 127
 6ce:	bf 22       	and	r11, r31
 6d0:	b6 fe       	sbrs	r11, 6
 6d2:	0b c0       	rjmp	.+22     	; 0x6ea <__stack+0x1eb>
 6d4:	2e ef       	ldi	r18, 0xFE	; 254
 6d6:	b2 22       	and	r11, r18
 6d8:	7e 14       	cp	r7, r14
 6da:	38 f4       	brcc	.+14     	; 0x6ea <__stack+0x1eb>
 6dc:	b4 fe       	sbrs	r11, 4
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <__stack+0x1ef>
 6e0:	b2 fc       	sbrc	r11, 2
 6e2:	05 c0       	rjmp	.+10     	; 0x6ee <__stack+0x1ef>
 6e4:	8f ee       	ldi	r24, 0xEF	; 239
 6e6:	b8 22       	and	r11, r24
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <__stack+0x1ef>
 6ea:	a7 2c       	mov	r10, r7
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <__stack+0x1f1>
 6ee:	ae 2c       	mov	r10, r14
 6f0:	8b 2d       	mov	r24, r11
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	b4 fe       	sbrs	r11, 4
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <__stack+0x213>
 6f8:	fe 01       	movw	r30, r28
 6fa:	e7 0d       	add	r30, r7
 6fc:	f1 1d       	adc	r31, r1
 6fe:	20 81       	ld	r18, Z
 700:	20 33       	cpi	r18, 0x30	; 48
 702:	19 f4       	brne	.+6      	; 0x70a <__stack+0x20b>
 704:	e9 ee       	ldi	r30, 0xE9	; 233
 706:	be 22       	and	r11, r30
 708:	09 c0       	rjmp	.+18     	; 0x71c <__stack+0x21d>
 70a:	a3 94       	inc	r10
 70c:	b2 fe       	sbrs	r11, 2
 70e:	06 c0       	rjmp	.+12     	; 0x71c <__stack+0x21d>
 710:	04 c0       	rjmp	.+8      	; 0x71a <__stack+0x21b>
 712:	86 78       	andi	r24, 0x86	; 134
 714:	90 70       	andi	r25, 0x00	; 0
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	09 f0       	breq	.+2      	; 0x71c <__stack+0x21d>
 71a:	a3 94       	inc	r10
 71c:	8b 2c       	mov	r8, r11
 71e:	99 24       	eor	r9, r9
 720:	b3 fc       	sbrc	r11, 3
 722:	13 c0       	rjmp	.+38     	; 0x74a <__stack+0x24b>
 724:	b0 fe       	sbrs	r11, 0
 726:	0e c0       	rjmp	.+28     	; 0x744 <__stack+0x245>
 728:	af 14       	cp	r10, r15
 72a:	28 f4       	brcc	.+10     	; 0x736 <__stack+0x237>
 72c:	e7 2c       	mov	r14, r7
 72e:	ef 0c       	add	r14, r15
 730:	ea 18       	sub	r14, r10
 732:	af 2c       	mov	r10, r15
 734:	07 c0       	rjmp	.+14     	; 0x744 <__stack+0x245>
 736:	e7 2c       	mov	r14, r7
 738:	05 c0       	rjmp	.+10     	; 0x744 <__stack+0x245>
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	b6 01       	movw	r22, r12
 740:	63 d0       	rcall	.+198    	; 0x808 <fputc>
 742:	a3 94       	inc	r10
 744:	af 14       	cp	r10, r15
 746:	c8 f3       	brcs	.-14     	; 0x73a <__stack+0x23b>
 748:	04 c0       	rjmp	.+8      	; 0x752 <__stack+0x253>
 74a:	af 14       	cp	r10, r15
 74c:	10 f4       	brcc	.+4      	; 0x752 <__stack+0x253>
 74e:	fa 18       	sub	r15, r10
 750:	01 c0       	rjmp	.+2      	; 0x754 <__stack+0x255>
 752:	ff 24       	eor	r15, r15
 754:	84 fe       	sbrs	r8, 4
 756:	0e c0       	rjmp	.+28     	; 0x774 <__stack+0x275>
 758:	80 e3       	ldi	r24, 0x30	; 48
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	b6 01       	movw	r22, r12
 75e:	54 d0       	rcall	.+168    	; 0x808 <fputc>
 760:	82 fe       	sbrs	r8, 2
 762:	1d c0       	rjmp	.+58     	; 0x79e <__stack+0x29f>
 764:	81 fe       	sbrs	r8, 1
 766:	03 c0       	rjmp	.+6      	; 0x76e <__stack+0x26f>
 768:	88 e5       	ldi	r24, 0x58	; 88
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	10 c0       	rjmp	.+32     	; 0x78e <__stack+0x28f>
 76e:	88 e7       	ldi	r24, 0x78	; 120
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0d c0       	rjmp	.+26     	; 0x78e <__stack+0x28f>
 774:	c4 01       	movw	r24, r8
 776:	86 78       	andi	r24, 0x86	; 134
 778:	90 70       	andi	r25, 0x00	; 0
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	81 f0       	breq	.+32     	; 0x79e <__stack+0x29f>
 77e:	81 fc       	sbrc	r8, 1
 780:	02 c0       	rjmp	.+4      	; 0x786 <__stack+0x287>
 782:	80 e2       	ldi	r24, 0x20	; 32
 784:	01 c0       	rjmp	.+2      	; 0x788 <__stack+0x289>
 786:	8b e2       	ldi	r24, 0x2B	; 43
 788:	b7 fc       	sbrc	r11, 7
 78a:	8d e2       	ldi	r24, 0x2D	; 45
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	b6 01       	movw	r22, r12
 790:	3b d0       	rcall	.+118    	; 0x808 <fputc>
 792:	05 c0       	rjmp	.+10     	; 0x79e <__stack+0x29f>
 794:	80 e3       	ldi	r24, 0x30	; 48
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b6 01       	movw	r22, r12
 79a:	36 d0       	rcall	.+108    	; 0x808 <fputc>
 79c:	ea 94       	dec	r14
 79e:	7e 14       	cp	r7, r14
 7a0:	c8 f3       	brcs	.-14     	; 0x794 <__stack+0x295>
 7a2:	7a 94       	dec	r7
 7a4:	f2 01       	movw	r30, r4
 7a6:	e7 0d       	add	r30, r7
 7a8:	f1 1d       	adc	r31, r1
 7aa:	80 81       	ld	r24, Z
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	b6 01       	movw	r22, r12
 7b0:	2b d0       	rcall	.+86     	; 0x808 <fputc>
 7b2:	77 20       	and	r7, r7
 7b4:	b1 f7       	brne	.-20     	; 0x7a2 <__stack+0x2a3>
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <__stack+0x2c3>
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	b6 01       	movw	r22, r12
 7be:	24 d0       	rcall	.+72     	; 0x808 <fputc>
 7c0:	fa 94       	dec	r15
 7c2:	ff 20       	and	r15, r15
 7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__stack+0x2b9>
 7c6:	44 ce       	rjmp	.-888    	; 0x450 <vfprintf+0x24>
 7c8:	f6 01       	movw	r30, r12
 7ca:	26 81       	ldd	r18, Z+6	; 0x06
 7cc:	37 81       	ldd	r19, Z+7	; 0x07
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <__stack+0x2d5>
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	3f ef       	ldi	r19, 0xFF	; 255
 7d4:	c9 01       	movw	r24, r18
 7d6:	2c 96       	adiw	r28, 0x0c	; 12
 7d8:	e2 e1       	ldi	r30, 0x12	; 18
 7da:	bc c0       	rjmp	.+376    	; 0x954 <__epilogue_restores__>

000007dc <strnlen_P>:
 7dc:	fc 01       	movw	r30, r24
 7de:	05 90       	lpm	r0, Z+
 7e0:	61 50       	subi	r22, 0x01	; 1
 7e2:	70 40       	sbci	r23, 0x00	; 0
 7e4:	01 10       	cpse	r0, r1
 7e6:	d8 f7       	brcc	.-10     	; 0x7de <strnlen_P+0x2>
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	8e 0f       	add	r24, r30
 7ee:	9f 1f       	adc	r25, r31
 7f0:	08 95       	ret

000007f2 <strnlen>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	61 50       	subi	r22, 0x01	; 1
 7f6:	70 40       	sbci	r23, 0x00	; 0
 7f8:	01 90       	ld	r0, Z+
 7fa:	01 10       	cpse	r0, r1
 7fc:	d8 f7       	brcc	.-10     	; 0x7f4 <strnlen+0x2>
 7fe:	80 95       	com	r24
 800:	90 95       	com	r25
 802:	8e 0f       	add	r24, r30
 804:	9f 1f       	adc	r25, r31
 806:	08 95       	ret

00000808 <fputc>:
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	8c 01       	movw	r16, r24
 812:	eb 01       	movw	r28, r22
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	81 ff       	sbrs	r24, 1
 818:	1b c0       	rjmp	.+54     	; 0x850 <fputc+0x48>
 81a:	82 ff       	sbrs	r24, 2
 81c:	0d c0       	rjmp	.+26     	; 0x838 <fputc+0x30>
 81e:	2e 81       	ldd	r18, Y+6	; 0x06
 820:	3f 81       	ldd	r19, Y+7	; 0x07
 822:	8c 81       	ldd	r24, Y+4	; 0x04
 824:	9d 81       	ldd	r25, Y+5	; 0x05
 826:	28 17       	cp	r18, r24
 828:	39 07       	cpc	r19, r25
 82a:	64 f4       	brge	.+24     	; 0x844 <fputc+0x3c>
 82c:	e8 81       	ld	r30, Y
 82e:	f9 81       	ldd	r31, Y+1	; 0x01
 830:	01 93       	st	Z+, r16
 832:	f9 83       	std	Y+1, r31	; 0x01
 834:	e8 83       	st	Y, r30
 836:	06 c0       	rjmp	.+12     	; 0x844 <fputc+0x3c>
 838:	e8 85       	ldd	r30, Y+8	; 0x08
 83a:	f9 85       	ldd	r31, Y+9	; 0x09
 83c:	80 2f       	mov	r24, r16
 83e:	09 95       	icall
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	31 f4       	brne	.+12     	; 0x850 <fputc+0x48>
 844:	8e 81       	ldd	r24, Y+6	; 0x06
 846:	9f 81       	ldd	r25, Y+7	; 0x07
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	9f 83       	std	Y+7, r25	; 0x07
 84c:	8e 83       	std	Y+6, r24	; 0x06
 84e:	02 c0       	rjmp	.+4      	; 0x854 <fputc+0x4c>
 850:	0f ef       	ldi	r16, 0xFF	; 255
 852:	1f ef       	ldi	r17, 0xFF	; 255
 854:	c8 01       	movw	r24, r16
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <__ultoa_invert>:
 860:	fa 01       	movw	r30, r20
 862:	aa 27       	eor	r26, r26
 864:	28 30       	cpi	r18, 0x08	; 8
 866:	51 f1       	breq	.+84     	; 0x8bc <__ultoa_invert+0x5c>
 868:	20 31       	cpi	r18, 0x10	; 16
 86a:	81 f1       	breq	.+96     	; 0x8cc <__ultoa_invert+0x6c>
 86c:	e8 94       	clt
 86e:	6f 93       	push	r22
 870:	6e 7f       	andi	r22, 0xFE	; 254
 872:	6e 5f       	subi	r22, 0xFE	; 254
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	af 4f       	sbci	r26, 0xFF	; 255
 87c:	b1 e0       	ldi	r27, 0x01	; 1
 87e:	3e d0       	rcall	.+124    	; 0x8fc <__ultoa_invert+0x9c>
 880:	b4 e0       	ldi	r27, 0x04	; 4
 882:	3c d0       	rcall	.+120    	; 0x8fc <__ultoa_invert+0x9c>
 884:	67 0f       	add	r22, r23
 886:	78 1f       	adc	r23, r24
 888:	89 1f       	adc	r24, r25
 88a:	9a 1f       	adc	r25, r26
 88c:	a1 1d       	adc	r26, r1
 88e:	68 0f       	add	r22, r24
 890:	79 1f       	adc	r23, r25
 892:	8a 1f       	adc	r24, r26
 894:	91 1d       	adc	r25, r1
 896:	a1 1d       	adc	r26, r1
 898:	6a 0f       	add	r22, r26
 89a:	71 1d       	adc	r23, r1
 89c:	81 1d       	adc	r24, r1
 89e:	91 1d       	adc	r25, r1
 8a0:	a1 1d       	adc	r26, r1
 8a2:	20 d0       	rcall	.+64     	; 0x8e4 <__ultoa_invert+0x84>
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <__ultoa_invert+0x48>
 8a6:	68 94       	set
 8a8:	3f 91       	pop	r19
 8aa:	2a e0       	ldi	r18, 0x0A	; 10
 8ac:	26 9f       	mul	r18, r22
 8ae:	11 24       	eor	r1, r1
 8b0:	30 19       	sub	r19, r0
 8b2:	30 5d       	subi	r19, 0xD0	; 208
 8b4:	31 93       	st	Z+, r19
 8b6:	de f6       	brtc	.-74     	; 0x86e <__ultoa_invert+0xe>
 8b8:	cf 01       	movw	r24, r30
 8ba:	08 95       	ret
 8bc:	46 2f       	mov	r20, r22
 8be:	47 70       	andi	r20, 0x07	; 7
 8c0:	40 5d       	subi	r20, 0xD0	; 208
 8c2:	41 93       	st	Z+, r20
 8c4:	b3 e0       	ldi	r27, 0x03	; 3
 8c6:	0f d0       	rcall	.+30     	; 0x8e6 <__ultoa_invert+0x86>
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__ultoa_invert+0x5c>
 8ca:	f6 cf       	rjmp	.-20     	; 0x8b8 <__ultoa_invert+0x58>
 8cc:	46 2f       	mov	r20, r22
 8ce:	4f 70       	andi	r20, 0x0F	; 15
 8d0:	40 5d       	subi	r20, 0xD0	; 208
 8d2:	4a 33       	cpi	r20, 0x3A	; 58
 8d4:	18 f0       	brcs	.+6      	; 0x8dc <__ultoa_invert+0x7c>
 8d6:	49 5d       	subi	r20, 0xD9	; 217
 8d8:	31 fd       	sbrc	r19, 1
 8da:	40 52       	subi	r20, 0x20	; 32
 8dc:	41 93       	st	Z+, r20
 8de:	02 d0       	rcall	.+4      	; 0x8e4 <__ultoa_invert+0x84>
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__ultoa_invert+0x6c>
 8e2:	ea cf       	rjmp	.-44     	; 0x8b8 <__ultoa_invert+0x58>
 8e4:	b4 e0       	ldi	r27, 0x04	; 4
 8e6:	a6 95       	lsr	r26
 8e8:	97 95       	ror	r25
 8ea:	87 95       	ror	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	ba 95       	dec	r27
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__ultoa_invert+0x86>
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	61 05       	cpc	r22, r1
 8f8:	71 05       	cpc	r23, r1
 8fa:	08 95       	ret
 8fc:	9b 01       	movw	r18, r22
 8fe:	ac 01       	movw	r20, r24
 900:	0a 2e       	mov	r0, r26
 902:	06 94       	lsr	r0
 904:	57 95       	ror	r21
 906:	47 95       	ror	r20
 908:	37 95       	ror	r19
 90a:	27 95       	ror	r18
 90c:	ba 95       	dec	r27
 90e:	c9 f7       	brne	.-14     	; 0x902 <__ultoa_invert+0xa2>
 910:	62 0f       	add	r22, r18
 912:	73 1f       	adc	r23, r19
 914:	84 1f       	adc	r24, r20
 916:	95 1f       	adc	r25, r21
 918:	a0 1d       	adc	r26, r0
 91a:	08 95       	ret

0000091c <__prologue_saves__>:
 91c:	2f 92       	push	r2
 91e:	3f 92       	push	r3
 920:	4f 92       	push	r4
 922:	5f 92       	push	r5
 924:	6f 92       	push	r6
 926:	7f 92       	push	r7
 928:	8f 92       	push	r8
 92a:	9f 92       	push	r9
 92c:	af 92       	push	r10
 92e:	bf 92       	push	r11
 930:	cf 92       	push	r12
 932:	df 92       	push	r13
 934:	ef 92       	push	r14
 936:	ff 92       	push	r15
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	ca 1b       	sub	r28, r26
 946:	db 0b       	sbc	r29, r27
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
 952:	09 94       	ijmp

00000954 <__epilogue_restores__>:
 954:	2a 88       	ldd	r2, Y+18	; 0x12
 956:	39 88       	ldd	r3, Y+17	; 0x11
 958:	48 88       	ldd	r4, Y+16	; 0x10
 95a:	5f 84       	ldd	r5, Y+15	; 0x0f
 95c:	6e 84       	ldd	r6, Y+14	; 0x0e
 95e:	7d 84       	ldd	r7, Y+13	; 0x0d
 960:	8c 84       	ldd	r8, Y+12	; 0x0c
 962:	9b 84       	ldd	r9, Y+11	; 0x0b
 964:	aa 84       	ldd	r10, Y+10	; 0x0a
 966:	b9 84       	ldd	r11, Y+9	; 0x09
 968:	c8 84       	ldd	r12, Y+8	; 0x08
 96a:	df 80       	ldd	r13, Y+7	; 0x07
 96c:	ee 80       	ldd	r14, Y+6	; 0x06
 96e:	fd 80       	ldd	r15, Y+5	; 0x05
 970:	0c 81       	ldd	r16, Y+4	; 0x04
 972:	1b 81       	ldd	r17, Y+3	; 0x03
 974:	aa 81       	ldd	r26, Y+2	; 0x02
 976:	b9 81       	ldd	r27, Y+1	; 0x01
 978:	ce 0f       	add	r28, r30
 97a:	d1 1d       	adc	r29, r1
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	f8 94       	cli
 980:	de bf       	out	0x3e, r29	; 62
 982:	0f be       	out	0x3f, r0	; 63
 984:	cd bf       	out	0x3d, r28	; 61
 986:	ed 01       	movw	r28, r26
 988:	08 95       	ret

0000098a <_exit>:
 98a:	f8 94       	cli

0000098c <__stop_program>:
 98c:	ff cf       	rjmp	.-2      	; 0x98c <__stop_program>
