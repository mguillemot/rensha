
test88c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000086  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000297  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000197  00000000  00000000  0000054f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000265  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012e  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a4  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__vector_18>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e7       	ldi	r30, 0x70	; 112
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	ae 32       	cpi	r26, 0x2E	; 46
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	76 d0       	rcall	.+236    	; 0x144 <main>
  58:	89 c0       	rjmp	.+274    	; 0x16c <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <USART_Init>:
void USART_Init()
{
	/* Init USART clock */
	#define BAUD 9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
  5c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  60:	8c e0       	ldi	r24, 0x0C	; 12
  62:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSR0A |= (1 << U2X0);
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	80 83       	st	Z, r24
	#else
	UCSR0A &= ~(1 << U2X0);
	#endif

	/* Enable receiver and transmitter and receive interrupt */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0)|_BV(RXCIE0);
  70:	88 e9       	ldi	r24, 0x98	; 152
  72:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	80 93 c2 00 	sts	0x00C2, r24
}
  7c:	08 95       	ret

0000007e <USART_Transmit>:

void USART_Transmit(unsigned char data)
{
  7e:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
  80:	80 91 c0 00 	lds	r24, 0x00C0
  84:	85 ff       	sbrs	r24, 5
  86:	fc cf       	rjmp	.-8      	; 0x80 <USART_Transmit+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  88:	90 93 c6 00 	sts	0x00C6, r25
}
  8c:	08 95       	ret

0000008e <USART_Receive>:

unsigned char USART_Receive()
{
	/* Wait for data to be received */
	while (!(UCSR0A & _BV(RXC0)));
  8e:	80 91 c0 00 	lds	r24, 0x00C0
  92:	87 ff       	sbrs	r24, 7
  94:	fc cf       	rjmp	.-8      	; 0x8e <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
  96:	80 91 c6 00 	lds	r24, 0x00C6
}
  9a:	08 95       	ret

0000009c <debug>:

void debug(const char *text)
{
  9c:	fc 01       	movw	r30, r24
  9e:	07 c0       	rjmp	.+14     	; 0xae <debug+0x12>
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
  a0:	80 91 c0 00 	lds	r24, 0x00C0
  a4:	85 ff       	sbrs	r24, 5
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <debug+0x4>
void debug(const char *text)
{
	const char *ptr = text;
	while (*ptr != '\0')
	{
		USART_Transmit(*ptr++);
  a8:	31 96       	adiw	r30, 0x01	; 1
void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
  aa:	90 93 c6 00 	sts	0x00C6, r25
}

void debug(const char *text)
{
	const char *ptr = text;
	while (*ptr != '\0')
  ae:	90 81       	ld	r25, Z
  b0:	99 23       	and	r25, r25
  b2:	b1 f7       	brne	.-20     	; 0xa0 <debug+0x4>
	{
		USART_Transmit(*ptr++);
	}
}
  b4:	08 95       	ret

000000b6 <debugln>:

void debugln(const char *text)
{
	debug(text);
  b6:	f2 df       	rcall	.-28     	; 0x9c <debug>
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0
  bc:	85 ff       	sbrs	r24, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <debugln+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	80 93 c6 00 	sts	0x00C6, r24
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
  c6:	80 91 c0 00 	lds	r24, 0x00C0
  ca:	85 ff       	sbrs	r24, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <debugln+0x10>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 c6 00 	sts	0x00C6, r24
void debugln(const char *text)
{
	debug(text);
	USART_Transmit('\r');
	USART_Transmit('\n');
}
  d4:	08 95       	ret

000000d6 <__vector_18>:

ISR(USART_RX_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
}

unsigned char USART_Receive()
{
	/* Wait for data to be received */
	while (!(UCSR0A & _BV(RXC0)));
  f8:	80 91 c0 00 	lds	r24, 0x00C0
  fc:	87 ff       	sbrs	r24, 7
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <__vector_18+0x22>
	/* Get and return received data from buffer */
	return UDR0;
 100:	90 91 c6 00 	lds	r25, 0x00C6
}

ISR(USART_RX_vect)
{
	unsigned char c = USART_Receive();
	if (c == '\r')
 104:	9d 30       	cpi	r25, 0x0D	; 13
 106:	39 f4       	brne	.+14     	; 0x116 <__vector_18+0x40>
	{
		debugln("");
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	d4 df       	rcall	.-88     	; 0xb6 <debugln>
		debugln("OK.");
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	d1 df       	rcall	.-94     	; 0xb6 <debugln>
 114:	06 c0       	rjmp	.+12     	; 0x122 <__vector_18+0x4c>
}

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & _BV(UDRE0)));
 116:	80 91 c0 00 	lds	r24, 0x00C0
 11a:	85 ff       	sbrs	r24, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <__vector_18+0x40>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 11e:	90 93 c6 00 	sts	0x00C6, r25
	}
	else
	{
		USART_Transmit(c);
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:

int main(void)
{
	/* USART is on port D */
	USART_Init();
 144:	8b df       	rcall	.-234    	; 0x5c <USART_Init>

	/* port B is button1out (bit 0) & button1in (bit1) */ 
	DDRB = 0x01; 
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 14a:	15 b8       	out	0x05, r1	; 5

	debugln("Booting Erhune's super-giga-autofire...");
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	b2 df       	rcall	.-156    	; 0xb6 <debugln>

	sei();
 152:	78 94       	sei
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 158:	29 e1       	ldi	r18, 0x19	; 25
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 162:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 164:	d9 f7       	brne	.-10     	; 0x15c <main+0x18>
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	97 e2       	ldi	r25, 0x27	; 39
 16a:	f8 cf       	rjmp	.-16     	; 0x15c <main+0x18>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
